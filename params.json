{"name":"Andraia-js-mobile-framework","tagline":"An ultra-lightweight javascript framework for building small mobile apps the way you like","body":"# Andraia\r\n\r\nA lightweight JS framework for building simple mobile HTML5 applications\r\n\r\n## Getting Started\r\n### On the server\r\nInstall the module with: `npm install Andraia`\r\n\r\n```javascript\r\nvar Andraia = require('Andraia');\r\nAndraia.awesome(); // \"awesome\"\r\n```\r\n\r\n### In the browser\r\nDownload the [production version][min] or the [development version][max].\r\n\r\n[min]: https://raw.github.com/grevory/andraia-js-mobile-framework/master/dist/Andraia.min.js\r\n[max]: https://raw.github.com/grevory/andraia-js-mobile-framework/master/dist/Andraia.js\r\n\r\nIn your web page:\r\n\r\n```html\r\n<script src=\"dist/Andraia.min.js\"></script>\r\n<script>\r\nawesome(); // \"awesome\"\r\n</script>\r\n```\r\n\r\nIn your code, you can attach Andraia's methods to any object.\r\n\r\n```html\r\n<script>\r\nvar exports = Bocoup.utils;\r\n</script>\r\n<script src=\"dist/Andraia.min.js\"></script>\r\n<script>\r\nBocoup.utils.awesome(); // \"awesome\"\r\n</script>\r\n```\r\n\r\n## Documentation\r\nLoading Andraia\r\n---------------\r\n\r\nYou need an element with an id attribute in order for Andraia to work. The element is where all the views will be loaded.\r\n\r\n```html\r\n<div id=\"game-cube\"></div>\r\n```\r\n\r\nWith that element in place (You can use whatever id you like), you can initiate the framework.\r\n\r\n```javascript\r\nvar app = new Andraia('game-cube');\r\n```\r\n\r\n\r\nModels\r\n------\r\n\r\nModels are easy.\r\n\r\n```javascript\r\nvar user = app.model('User', function() {\r\n  this.firstName = 'Enzo';\r\n  this.lastName = 'Matrix';\r\n  this.fullName = function() {\r\n    return this.firstName + ' ' + this.lastName;\r\n  };\r\n});\r\nconsole.log(\"User's name\", user.fullName);\r\n```\r\n\r\nAs long as your model is a function and it returns something you can design it however you like.\r\n\r\nViews\r\n-----\r\n\r\nYou can load a view with a controller for each page of your app. \r\n\r\nThe template can come from your HTML\r\n\r\n```html\r\n<script id=\"loginView\" type=\"text/html\">\r\n  <form class=\"login-form\" role=\"form\">\r\n    <div class=\"form-group\">\r\n      <label>E-mail</label>\r\n      <input \r\n        type=\"text\"\r\n        name=\"email\"\r\n        class=\"form-control\"\r\n        placeholder=\"E-mail\">\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Password</label>\r\n      <input\r\n        type=\"password\"\r\n        name=\"password\"\r\n        class=\"form-control\"\r\n        placeholder=\"Password\">\r\n    </div>\r\n    <button \r\n      type=\"submit\" \r\n      class=\"btn btn-default\">\r\n      Log in\r\n    </button>\r\n  </form>\r\n</script>\r\n```\r\n\r\nThe first parameter is the name of the ID of the HTML element.\r\n\r\nThe second parameter is the controller function that will handle bindings and data.\r\n\r\n```javascript\r\nvar loginCtrl = function() {\r\n  $('[name=email]').focus(function(e){\r\n    console.log($('[name=email]').val());\r\n  });\r\n};\r\napp.view('loginView', loginCtrl);\r\n```\r\n\r\nTemplating\r\n----------\r\n\r\nYou can actually use whatever you for templating.\r\n\r\nLet's say you want to use Underscore.JS.\r\n\r\n```javascript\r\napp.template = function(template, data) {\r\n  // Use Underscore's templating\r\n  var compiled = _.template(template);\r\n  return compiled(data);\r\n};\r\n```\r\n\r\nThe template function takes two parameters always. The HTML as a string and data as an object.\r\n\r\nBy adding the template function Andraia will automatically render the template substituing your template values. Using the example above\r\n\r\nIn your HTML template\r\n\r\n```html\r\n<div id=\"loginView\">\r\n  <p>Welcome <%= format %></p>\r\n</div>\r\n```\r\n\r\n```javascript\r\nvar loginCtrl = function() {\r\n  $('[name=email]').focus(function(e){\r\n    console.log($('[name=email]').val());\r\n  });\r\n};\r\nvar loginData = {\r\n  \"format\": \"Game Sprite\"\r\n};\r\napp.view('loginView', loginCtrl, loginData);\r\n```\r\n\r\n## Examples\r\n_(Coming soon)_\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n_Also, please don't edit files in the \"dist\" subdirectory as they are generated via Grunt. You'll find source code in the \"lib\" subdirectory!_\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n\r\n## License\r\nCopyright (c) 2014 Gregory Pike  \r\nLicensed under the MIT license.\r\n","google":"UA-40285920-2","note":"Don't delete this file! It's used internally to help with page regeneration."}